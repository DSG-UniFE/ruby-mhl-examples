#!/usr/bin/env ruby

begin
  require 'forwardable'
  require 'mhl'
  require 'unicode_plot'
  require 'logger'
rescue LoadError
  require 'rubygems'
  require 'mhl'
  require 'logger'
end

def mean(array)
  array.inject(0.0) { |sum, el| sum + el } / array.size
end

def std_dev(array)
  m = mean(array)
  variance = array.inject(0.0) { |variance, x| variance + (x - m) ** 2 }
  Math.sqrt(variance / array.size)
end


TIME = Time.now.strftime('%Y%m%d%H%M%S')
RESULTDIR = "#{TIME}_results"

# create an output directory if it does not exist
def create_log(method, tofile: false)
  if tofile
    Dir.mkdir(RESULTDIR) unless File.exist?(RESULTDIR)
    log = "#{RESULTDIR}/#{method}_#{TIME}.log"
    File.delete(log) if File.exist?(log)
    logger = Logger.new(log)
    logger.level = Logger::INFO
    logger
  else 
    logger = Logger.new(STDOUT)
    logger.level = Logger::INFO
    logger
  end
end  

rastrigin = lambda do |x|
  d = x.length
  ret = 10 * d
  x.each do |xi|
    ret += xi ** 2 - 10 * Math::cos(2* Math::PI * xi)
  end
  -ret
end

puts "--- Rastrigin Funcion Benchmark ---"
puts "--- n=2 xi in [-5.12, 5.12] ---"


logger = create_log("ga")
iteration = 500 #100

solver_conf = {
    population_size: 128,
    genotype_space_type: :real, #binary o bitstrings (github)
    mutation_probability: 0.5,
    recombination_probability: 0.5,
    recombination_threshold: 0.40,
    genotype_space_conf: {
        dimensions: 2,
        recombination_type: :intermediate,
        random_func: lambda { Array.new(2) { rand(-5.12..5.12) } },
        constraints: Array.new(2){
              {from: -5.12, to: 5.12}
        }
    },
  exit_condition: lambda {|gen, best| gen >= iteration  },
  logger: logger,
  log_level: :info
}
solver = MHL::GeneticAlgorithmSolver.new(solver_conf)

ga_times = []
ga_bests = []

bests_ga = nil
30.times do |i|
  start = Time.now
  
  best = solver.solve(rastrigin, {concurrent: false})
  t_bench = Time.now - start
  ga_times << t_bench

  puts "GA: Population Size: 128, Iteration #{iteration}\n\t Best: #{best[:fitness]}, Time: #{t_bench}"
  puts "#{best[:genotype]}"
  ga_bests << best[:fitness]

  bests_ga = solver.best_positions
end 

# For GWO 
 
logger = create_log("gwo")
solver_conf = {
  population_size: 40,
  dimensions: 2,
  logger: logger,
  constraints: {
    min: [-5.12,-5.12],
    max: [5.12, 5.12],
  },
  exit_condition: lambda {|gen, best| gen >= iteration  },
  log_level: :info
}

gwo_times = []
gwo_bests = []
solver = MHL::GreyWolfSolver.new(solver_conf)

bests_gwo = nil
30.times do |i|
  start = Time.now
  best = solver.solve(rastrigin, {concurrent: false})
  t_bench = Time.now - start
  gwo_times << t_bench
  warn "Best: #{best}"
  puts "GWO: Iteration #{iteration}\n\t Best: #{best[:height]}, Time: #{t_bench}"
  puts "#{best[:position]}"
  gwo_bests << best[:height]
  bests_gwo = solver.best_positions
end

logger = create_log("qpso")
iteration = 500 # 100
solver_conf = {
  #num_swarms: 3,
  swarm_size: 40,
  logger: logger,
  constraints: {
    min: [-5.12,-5.12],
    max: [5.12, 5.12],
  },
  exit_condition: lambda {|gen, best| gen >= iteration  },
  log_level: :info
}

solver = MHL::QuantumPSOSolver.new(solver_conf)
qpso_times = []
qpso_bests = []

bests_qpso = nil
30.times do |i|
  start = Time.now
  best = solver.solve(rastrigin, {concurrent: false})
  t_bench = Time.now - start
  qpso_times << t_bench
  puts "QPSO: Swarm_size: 40, Iteration #{iteration}\n\t Best: #{best[:height]}, Time: #{t_bench}"
  puts "#{best[:position]}"
  qpso_bests << best[:height]
  bests_qpso = solver.best_positions
end

logger = create_log("MPSO")
iteration = 250 # 50

solver_conf = {
  num_swarms: 4,
  swarm_size: 50,
  logger: logger,
  constraints: {
    min: [-5.12,-5.12],
    max: [5.12, 5.12],
  },
  exit_condition: lambda {|gen, best| gen >= iteration  },
  log_level: :info
}

solver = MHL::MultiSwarmQPSOSolver.new(solver_conf)

mpso_times = []
mpso_bests = []
bests_mpso = nil

30.times do |i|
  start = Time.now
  best = solver.solve(rastrigin, {concurrent: false})
  t_bench = Time.now - start

  puts "MPSO: Swarm_size: 50, N_Swarms: 4, Iteration #{iteration}\n\t Best: #{best[:height]}, Time: #{t_bench}"
  puts "#{best[:position]}"
  bests_mpso = solver.best_positions
  mpso_times << t_bench
  mpso_bests << best[:height]
end


X_LIMIT = 50
plot = UnicodePlot.lineplot(bests_ga.first(X_LIMIT), name: "GA", title: "Rastrigin Benchmark", width: 50, height: 20, xlabel: 'Iterations', ylabel: 'f(x)')
UnicodePlot.lineplot!(plot, bests_qpso.first(X_LIMIT), name: "QPSO")
UnicodePlot.lineplot!(plot, bests_mpso.first(X_LIMIT), name: "MPSO")

plot.render

puts "30 executions results"


puts "GA mean: #{mean(ga_bests)} std_dev: #{std_dev(ga_bests)} mean time: #{mean(ga_times)} std_dev time: #{std_dev(ga_times)}"
puts "QPSO mean: #{mean(qpso_bests)} std_dev: #{std_dev(qpso_bests)} mean time: #{mean(qpso_times)} std_dev time: #{std_dev(qpso_times)}"
puts "MPSO mean: #{mean(mpso_bests)} std_dev: #{std_dev(mpso_bests)} mean time: #{mean(mpso_times)} std_dev time: #{std_dev(mpso_times)}"

exit 0
