#!/usr/bin/env ruby

begin
  require 'forwardable'
  require 'mhl'
  require 'unicode_plot'
  require 'logger'
rescue LoadError
  require 'rubygems'
  require 'mhl'
  require 'logger'
end

TIME = Time.now.strftime('%Y%m%d%H%M%S')
RESULTDIR = "#{TIME}_results"

# create an output directory if it does not exist
def create_log(method) 
  Dir.mkdir(RESULTDIR) unless File.exist?(RESULTDIR)
  log = "#{RESULTDIR}/#{method}_#{TIME}.log"
  File.delete(log) if File.exist?(log)
  logger = Logger.new(log)
  logger.level = Logger::DEBUG
  logger
end  

rastrigin = lambda do |x|
  d = x.length
  ret = 10 * d
  x.each do |xi|
    ret += xi ** 2 - 10 * Math::cos(2* Math::PI * xi)
  end
  ret
end

puts "--- Rastrigin Funcion Benchmark ---"
puts "--- n=2 xi in [-5.12, 5.12] ---"


logger = create_log("ga")
iteration = 250

# For GWO 
 
logger = create_log("gwo")
solver_conf = {
  population_size: 40,
  dimensions: 2,
  logger: logger,
  iterations: iteration,
  constraints: {
    min: [-5.12,-5.12],
    max: [5.12, 5.12],
  },
  exit_condition: lambda {|gen, _| gen >= iteration  },
  log_level: :info
}

gwo_times = []
gwo_bests = []
solver = MHL::GreyWolfSolver.new(solver_conf)

bests_gwo = nil
30.times do |i|
  start = Time.now
  best = solver.solve(rastrigin, {concurrent: false})
  t_bench = Time.now - start
  gwo_times << t_bench
  warn "Best: #{best}"
  puts "GWO: Iteration #{iteration}\n\t Best: #{best[:fitness]}, Time: #{t_bench}"
  puts "#{best[:position]}"
  gwo_bests << best[:fitness]
  bests_gwo = solver.best_positions
end


X_LIMIT = 250

plot = UnicodePlot.lineplot(bests_gwo.first(X_LIMIT), name: "GWO", title: "Rastrigin Benchmark",
                            width: 50, height: 20, xlabel: 'Iterations', ylabel: 'f(x)')

plot.render

puts "30 executions results"

def mean(array)
  array.inject(0.0) { |sum, el| sum + el } / array.size
end

def std_dev(array)
  m = mean(array)
  variance = array.inject(0.0) { |variance, x| variance + (x - m) ** 2 }
  Math.sqrt(variance / array.size)
end

puts "GWO mean: #{mean(gwo_bests)} std_dev: #{std_dev(gwo_bests)} mean time: #{mean(gwo_times)} std_dev time: #{std_dev(gwo_times)}"

exit 0
